{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAQ,SAAS,aAAa,CAAC,UAC/B,EAAa,SAAS,gBAAgB,CAAC,kBACvC,EAAgB,SAAS,gBAAgB,CAAC,qBAC1C,EAAgB,SAAS,gBAAgB,CAAC,qBAsDhD,SAAS,EAAmB,CAAS,CAAE,CAAM,CAAE,CAAY,EACrD,GAtDY,GAsDc,GArDd,GAsDd,EAAO,YAAY,CAAC,WAAY,IAEhC,EAAa,OAAO,CAAC,SAAC,CAAtB,EAA8B,OAAA,EAAI,eAAe,CAAC,W,EAEtD,CAxDA,SAAS,IAAI,CAAC,gBAAgB,CAAC,QAAS,SAAC,CAAzC,EACE,IAAM,EAAS,EAAE,MAAM,CAAC,OAAO,CAAC,WAEhC,GAAI,CAAC,EACH,OAAO,KAGT,IAAM,EAAQ,EAAG,EAAM,gBAAgB,CAAC,OAClC,EAAS,CAAI,CAAC,EAAE,CAAC,KAAK,CACxB,EAAa,EAAK,MAAM,CACxB,EAAe,EAAO,MAAM,CAC1B,EAAc,EAAI,GAAY,QAAQ,CAAC,GACvC,EAAoB,EAAI,GAAe,QAAQ,CAAC,GAEtD,GAAI,EAAa,CACf,GAAI,GAAqB,EAjBX,GAiBmC,CAC/C,IAIA,IAAK,IAFC,EAAS,EAAM,SAAS,GAErB,EAAM,EAAG,EAAM,EAAc,IACpC,EAAO,UAAU,CAAC,EAEtB,KAAW,CAAC,GAAqB,EA1BnB,IA2BZ,IACA,CAAI,CAAC,EAAE,CAAC,MAAM,IAGhB,EAAmB,EAAY,EAAQ,GAEvC,MACF,CAEI,GAAqB,EAnCT,IAoCd,IAEA,EAAK,OAAO,CAAC,SAAC,CAAd,EACE,EAAI,UAAU,EAChB,IACS,CAAC,GAAqB,EA1CjB,IA2Cd,IAEA,EAAK,OAAO,CAAC,SAAC,CAAd,EACE,EAAI,QAAQ,CAAC,EAAE,CAAC,MAAM,EACxB,IAGF,EAAmB,EAAc,EAAQ,EAC3C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\".field\");\nvar rowButtons = document.querySelectorAll('[class*=\"row\"]');\nvar columnButtons = document.querySelectorAll('[class*=\"column\"]');\nvar appendButtons = document.querySelectorAll('[class*=\"append\"]');\nvar MIN_PARTS = 2;\nvar MAX_PARTS = 10;\ndocument.body.addEventListener(\"click\", function(e) {\n    var button = e.target.closest(\".button\");\n    if (!button) return null;\n    var rows = _to_consumable_array(table.querySelectorAll(\"tr\"));\n    var column = rows[0].cells;\n    var rowsNumber = rows.length;\n    var columnNumber = column.length;\n    var containRows = _to_consumable_array(rowButtons).includes(button);\n    var isAppendOperation = _to_consumable_array(appendButtons).includes(button);\n    if (containRows) {\n        if (isAppendOperation && rowsNumber < MAX_PARTS) {\n            rowsNumber++;\n            var newRow = table.insertRow();\n            for(var col = 0; col < columnNumber; col++)newRow.insertCell(col);\n        } else if (!isAppendOperation && rowsNumber > MIN_PARTS) {\n            rowsNumber--;\n            rows[0].remove();\n        }\n        updateButtonStates(rowsNumber, button, rowButtons);\n        return;\n    }\n    if (isAppendOperation && columnNumber < MAX_PARTS) {\n        columnNumber++;\n        rows.forEach(function(row) {\n            row.insertCell();\n        });\n    } else if (!isAppendOperation && columnNumber > MIN_PARTS) {\n        columnNumber--;\n        rows.forEach(function(row) {\n            row.children[0].remove();\n        });\n    }\n    updateButtonStates(columnNumber, button, columnButtons);\n});\nfunction updateButtonStates(tablePart, button, tableButtons) {\n    if (tablePart <= MIN_PARTS || tablePart >= MAX_PARTS) button.setAttribute(\"disabled\", \"\");\n    else tableButtons.forEach(function(but) {\n        return but.removeAttribute(\"disabled\");\n    });\n}\n\n//# sourceMappingURL=index.d9a1d35e.js.map\n","'use strict';\n\nconst table = document.querySelector('.field');\nconst rowButtons = document.querySelectorAll('[class*=\"row\"]');\nconst columnButtons = document.querySelectorAll('[class*=\"column\"]');\nconst appendButtons = document.querySelectorAll('[class*=\"append\"]');\nconst MIN_PARTS = 2;\nconst MAX_PARTS = 10;\n\ndocument.body.addEventListener('click', (e) => {\n  const button = e.target.closest('.button');\n\n  if (!button) {\n    return null;\n  }\n\n  const rows = [...table.querySelectorAll('tr')];\n  const column = rows[0].cells;\n  let rowsNumber = rows.length;\n  let columnNumber = column.length;\n  const containRows = [...rowButtons].includes(button);\n  const isAppendOperation = [...appendButtons].includes(button);\n\n  if (containRows) {\n    if (isAppendOperation && rowsNumber < MAX_PARTS) {\n      rowsNumber++;\n\n      const newRow = table.insertRow();\n\n      for (let col = 0; col < columnNumber; col++) {\n        newRow.insertCell(col);\n      }\n    } else if (!isAppendOperation && rowsNumber > MIN_PARTS) {\n      rowsNumber--;\n      rows[0].remove();\n    }\n\n    updateButtonStates(rowsNumber, button, rowButtons);\n\n    return;\n  }\n\n  if (isAppendOperation && columnNumber < MAX_PARTS) {\n    columnNumber++;\n\n    rows.forEach((row) => {\n      row.insertCell();\n    });\n  } else if (!isAppendOperation && columnNumber > MIN_PARTS) {\n    columnNumber--;\n\n    rows.forEach((row) => {\n      row.children[0].remove();\n    });\n  }\n\n  updateButtonStates(columnNumber, button, columnButtons);\n});\n\nfunction updateButtonStates(tablePart, button, tableButtons) {\n  if (tablePart <= MIN_PARTS || tablePart >= MAX_PARTS) {\n    button.setAttribute('disabled', '');\n  } else {\n    tableButtons.forEach((but) => but.removeAttribute('disabled'));\n  }\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","table","document","querySelector","rowButtons","querySelectorAll","columnButtons","appendButtons","updateButtonStates","tablePart","button","tableButtons","setAttribute","forEach","but","removeAttribute","body","addEventListener","e","target","closest","rows","column","cells","rowsNumber","columnNumber","containRows","includes","isAppendOperation","newRow","insertRow","col","insertCell","remove","row","children"],"version":3,"file":"index.d9a1d35e.js.map"}